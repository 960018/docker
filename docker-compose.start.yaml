networks:

    frontend:
        name: frontend
        external: true

    backend:
        name: backend
        external: true

volumes:

    redisdata:
    socks:
        external: true
    postgres13:
        external: true
    postgres14:
        external: true
    postgres15:
        external: true
    postgres16:
        external: true
    postgres17:
        external: true

x-variables: &x-variables
    POSTGRES_PASSWORD: 'Bqox56ewGRxrUY5MzFUNx0w23AXN0MY9'

x-pg-data: &x-pg-data
    ./pg:/data

x-sock: &x-sock
    socks:/tmp/docker/

services:

    traefik:
        image: traefik:${TRAEFIK}
        container_name: traefik
        ports:
            - "127.0.0.1:80:80"
            - "127.0.0.1:443:443/tcp"
            - "127.0.0.1:443:443/udp"
            - "127.0.0.1:8080:8080"
        networks:
            - frontend
            - backend
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./traefik/log:/etc/traefik/log
            - ./traefik/dynamic_conf:/dynamic_conf
            - *x-sock
        restart: always
        command:
            - --log
            - --log.level=ERROR
            - --api.insecure
            - --providers.docker
            - --providers.docker.exposedbydefault=false
            - --providers.docker.network=frontend
            - --accessLog
            - --accessLog.filePath=/etc/traefik/log/access.json
            - --accesslog.bufferingsize=100
            - --accesslog.format=json
            - --log.filePath=/etc/traefik/log/error.log
            - --providers.file.directory=/dynamic_conf
            - --providers.file.filename=/dynamic_conf/traefik_dynamic.yml
            - --providers.file.watch
            - --entryPoints.http.address=:80
            - --entryPoints.https.address=:443
            - --entryPoints.http.forwardedHeaders.insecure
            - --entryPoints.https.forwardedHeaders.insecure
            - --ping
            - --ping.entryPoint=https
            - --providers.docker.watch
            - --entrypoints.http3.http3=true
            - --entrypoints.http3.http3.advertisedport=443
#            - --entryPoints.http3.address=:443
            - --entryPoints.http3.address=:443/udp
            - --entryPoints.http3.forwardedHeaders.insecure
            - --entrypoints.http.http.redirections.entryPoint.to=https
            - --entrypoints.https.http.redirections.entryPoint.scheme=https
            - --entrypoints.https.http.redirections.entrypoint.permanent=true
            - --serversTransport.insecureSkipVerify=true
            - --providers.redis.endpoints=keydb:6379
        labels:
            - traefik.enable=true
            - traefik.docker.network=frontend
            - traefik.http.routers.gateway.rule=Host(`localhost`)
            - traefik.http.routers.gateway.service=api@internal
            - traefik.http.routers.gateway.entrypoints=https
            - traefik.http.routers.gateway.tls=true
            - traefik.http.services.gateway.loadbalancer.server.port=8080
            - traefik.http.routers.ping.tls=true
            - traefik.http.routers.ping.rule=Host(`localhost`) && PathPrefix(`/ping`)
            - traefik.http.routers.ping.service=ping@internal
        healthcheck:
            test: wget --no-check-certificate -q -O - http://localhost:443/ping || exit 1
            interval: 30s
            timeout: 30s
            retries: 3
        mem_limit: 256m
        tmpfs: /tmp
        profiles: ["full"]

    tmp:
        image: bash:devel
        container_name: tmp
        mem_limit: 8m
        command: sh -c "mkdir -p /tmp/docker && chmod -R 777 /tmp && bash"
        tty: true
        volumes:
            - *x-sock
        networks:
            - backend
        healthcheck:
            test: "ps aux | grep bash | grep -v grep || exit 1"
            interval: 10s
            timeout: 5s
            retries: 5

    keydb:
        image: ghcr.io/960018/keydb:${ARCH}
        container_name: keydb
        networks:
            - backend
        restart: always
        volumes:
            - *x-sock
        ports:
            - "127.0.0.1:6379:6379"
        mem_limit: 64m
        tmpfs: /tmp
        depends_on:
            - tmp
        healthcheck:
            test: [ "CMD", "keydb-cli", "--raw", "incr", "ping" ]
            interval: 10s
            timeout: 5s
            retries: 5
        profiles: ["full", "local"]

    postgres13:
        image: postgres:${POSTGRES13}
        container_name: postgres13
        environment:
            <<: *x-variables
        volumes:
            - ./postgres13:/var/lib/postgresql/data
            - *x-pg-data
            - postgres13:/var/run
        restart: always
        networks:
            - backend
        ports:
            - "127.0.0.1:5433:5432"
        mem_limit: 512m
        shm_size: 256m
        tmpfs: /tmp
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 5s
            retries: 5
        profiles: ["full", "local"]

    postgres14:
        image: postgres:${POSTGRES14}
        container_name: postgres14
        environment:
            <<: *x-variables
        volumes:
            - ./postgres14:/var/lib/postgresql/data
            - *x-pg-data
            - postgres14:/var/run
        restart: always
        networks:
            - backend
        ports:
            - "127.0.0.1:5434:5432"
        mem_limit: 512m
        shm_size: 256m
        tmpfs: /tmp
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 5s
            retries: 5
        profiles: ["full", "local"]

    postgres15:
        image: postgres:${POSTGRES15}
        container_name: postgres15
        environment:
            <<: *x-variables
        volumes:
            - ./postgres15:/var/lib/postgresql/data
            - *x-pg-data
            - postgres15:/var/run
        restart: always
        networks:
            - backend
        ports:
            - "127.0.0.1:5435:5432"
        mem_limit: 256m
        shm_size: 256m
        tmpfs: /tmp
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 5s
            retries: 5
        profiles: ["full"]

    postgres16:
        image: postgres:${POSTGRES16}
        container_name: postgres16
        environment:
            <<: *x-variables
        volumes:
            - ./postgres16:/var/lib/postgresql/data
            - *x-pg-data
            - postgres16:/var/run
        restart: always
        networks:
            - backend
        ports:
            - "127.0.0.1:5436:5432"
        mem_limit: 512m
        shm_size: 256m
        tmpfs: /tmp
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 5s
            retries: 5
        profiles: ["full"]

    postgres17:
        image: postgres:${POSTGRES17}
        container_name: postgres17
        environment:
            <<: *x-variables
        volumes:
            - ./postgres17:/var/lib/postgresql/data
            - *x-pg-data
            - postgres17:/var/run
        restart: always
        networks:
            - backend
        ports:
            - "127.0.0.1:5437:5432"
        mem_limit: 512m
        shm_size: 256m
        tmpfs: /tmp
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U postgres" ]
            interval: 10s
            timeout: 5s
            retries: 5
        profiles: [ "full" ]

    memcached:
        image: memcached:${MEMCACHED}
        container_name: memcached
        ports:
            - "127.0.0.1:11211:11211"
        networks:
            - backend
        mem_limit: 128m
        tmpfs: /tmp
        volumes:
            - *x-sock
        command: "memcached -s /tmp/docker/memcached.sock -a 777 -o modern"
        profiles: ["full"]
