networks:

    frontend:
        name: frontend
        external: true

    backend:
        name: backend
        external: true

x-sock: &x-sock
    socks:/tmp/docker/

volumes:

    socks:
        external: true

services:

    portaineragent:
        image: portainer/agent:${PORTAINER}
        container_name: portaineragent
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker/volumes:/var/lib/docker/volumes
        networks:
            - backend
        mem_limit: 64M
        tmpfs: /tmp

    portainer:
        image: portainer/portainer-ce:${PORTAINER}
        container_name: portainer
        command: -H tcp://portaineragent:9001 --tlsskipverify
        volumes:
            - ./portainer/data:/data
        networks:
            - frontend
            - backend
        mem_limit: 256M
        tmpfs: /tmp
        labels:
            - traefik.enable=true
            - traefik.docker.network=frontend
            - traefik.constraint-label=public
            - traefik.http.routers.portainer.entrypoints=https
            - traefik.http.routers.portainer.tls=true
            - traefik.http.routers.portainer.rule=Host(`portainer.dev.io`)
            - traefik.http.services.portainer.loadbalancer.server.port=9000
            - traefik.http.routers.portainer.service=portainer

    mercure:
        image: dunglas/mercure:${MERCURE}
        container_name: mercure
        command: /usr/bin/caddy run --config /etc/caddy/dev.Caddyfile
        volumes:
            - ./mercure/data:/data
            - ./mercure/config:/config
        mem_limit: 1G
        restart: unless-stopped
        tmpfs: /tmp
        networks:
            - frontend
            - backend
        labels:
            - traefik.enable=true
            - traefik.docker.network=frontend
            - traefik.constraint-label=public
            - traefik.http.routers.mercure.entrypoints=https
            - traefik.http.routers.mercure.tls=true
            - traefik.http.routers.mercure.rule=Host(`mercure.dev.io`)
            - traefik.http.services.mercure.loadbalancer.server.port=80
            - traefik.http.routers.mercure.service=mercure
        environment:
            SERVER_NAME: ':80'
            MERCURE_PUBLISHER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'
            MERCURE_SUBSCRIBER_JWT_KEY: '!ChangeThisMercureHubJWTSecretKey!'

    jaeger:
        image: jaegertracing/all-in-one:${JAEGER}
        container_name: jaeger
        environment:
            COLLECTOR_ZIPKIN_HTTP_PORT: 9411
        volumes:
            - ./jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
        command: --query.ui-config /etc/jaeger/jaeger-ui.json
        ports:
            - "127.0.0.1:16686:16686"
        networks:
            - frontend
            - backend
        labels:
            - traefik.enable=true
            - traefik.docker.network=frontend
            - traefik.constraint-label=public
            - traefik.http.routers.jaeger.entrypoints=https
            - traefik.http.routers.jaeger.tls=true
            - traefik.http.routers.jaeger.rule=Host(`jaeger.dev.io`)
            - traefik.http.services.jaeger.loadbalancer.server.port=16686

#    memcached:
#        image: memcached:${MEMCACHED}
#        container_name: memcached
#        ports:
#            - "127.0.0.1:11211:11211"
#        networks:
#            - backend
#        mem_limit: 128m
#        tmpfs: /tmp
#        volumes:
#            - *x-sock
#        command: "memcached -s /tmp/docker/memcached.sock -a 777 -o modern"
#        profiles: [ "full" ]
